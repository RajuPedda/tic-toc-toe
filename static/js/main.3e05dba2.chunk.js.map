{"version":3,"sources":["components/Square.tsx","pages/Game.tsx","pages/Start.tsx","pages/Finished.tsx","App.tsx","hooks/useTicTacToe.ts","reportWebVitals.ts","index.tsx"],"names":["Square","props","index","value","handleClick","style","width","height","fontSize","backgroundColor","color","cursor","onClick","Game","board","display","gridTemplateColumns","map","Start","handleStart","useState","players","setPlayers","handleInput","event","newPlayers","splice","currentTarget","canStart","useMemo","every","player","length","onSubmit","preventDefault","className","type","placeholder","onInput","e","Finished","name","restart","App","game","Array","fill","setBoard","turn","setTurn","winner","setWinner","status","setStatus","useEffect","winningPositions","winningPositionsIndex","boardValuesToCkeck","checkingValue","isFinished","filter","newBoard","handleRestart","gameHook","alignItems","justifyContent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e05dba2.chunk.js","sourcesContent":["interface Props {\r\n  index: number,\r\n  value: string,\r\n  handleClick(index: number): void,\r\n}\r\n\r\nconst Square = (props: Props) => {\r\n  const { index, value, handleClick } = props;\r\n  const styles = {\r\n    button: {\r\n      width: \"100px\",\r\n      height: \"100px\",\r\n      fontSize: \"46px\",\r\n      backgroundColor: \"#ffffff\",\r\n      color: \"#6f6d41\",\r\n      cursor: \"pointer\"\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <button style={styles.button} onClick={() => handleClick(index)}>\r\n      {value}\r\n    </button>\r\n  )\r\n}\r\nexport default Square;\r\n","import Square from \"../components/Square\";\r\ninterface Props {\r\n  board: string[];\r\n  handleClick(index: number): void;\r\n}\r\nconst Game = (props: Props) => {\r\n  const { board, handleClick } = props;\r\n  const styles = {\r\n    board: {\r\n      display: \"grid\",\r\n      gridTemplateColumns: \"repeat(3, 1fr)\",\r\n      width: \"300px\"\r\n    }\r\n  };\r\n  return (\r\n    <div style={styles.board}>\r\n      {board.map((value, index) => (\r\n        <Square\r\n          key={index}\r\n          value={value}\r\n          index={index}\r\n          handleClick={handleClick}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\nexport default Game;\r\n","import { useState, useMemo, FormEvent } from \"react\";\r\nimport './Start.css'\r\n\r\ninterface Props {\r\n  handleStart(players: string[]): void;\r\n}\r\n\r\nconst Start = (props: Props) => {\r\n  const { handleStart } = props;\r\n  const [players, setPlayers] = useState([\"\", \"\"]);\r\n  const handleInput = (event: FormEvent<HTMLInputElement>, index: number) => {\r\n    const newPlayers = [...players];\r\n    newPlayers.splice(index, 1, event.currentTarget.value);\r\n    setPlayers(newPlayers);\r\n  };\r\n  const canStart = useMemo(\r\n    () => players.every((player) => player && player.length > 0),\r\n    [players]\r\n  );\r\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    if (!canStart) return;\r\n    handleStart(players);\r\n  };\r\n\r\n  return (\r\n      <form onSubmit={handleSubmit}>\r\n          <div className=\"main\">\r\n              <div>\r\n                <h1>Tic Toc Toe</h1>\r\n                <div>\r\n                  <input value={players[0]}\r\n                   type=\"text\" placeholder=\"Player1 name\" \r\n                   className=\"name\"\r\n                   onInput={(e) => handleInput(e, 0)}/>\r\n                </div>\r\n\r\n                <div className=\"second-input\">\r\n                  <input value={players[1]} type=\"text\" placeholder=\"Player2 name\" \r\n                  className=\"name\" onInput={(e) => handleInput(e, 1)}/>\r\n                </div>\r\n\r\n              <div className=\"login-button\">\r\n                  <button className= \"start-button\" type=\"submit\" >Start</button>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n      </form>\r\n  );\r\n};\r\nexport default Start;\r\n","interface Props {\r\n  name: string | null;\r\n  restart(): void;\r\n}\r\n\r\nconst Finished = (props: Props) => {\r\n  const { name, restart } = props;\r\n  return (\r\n    <div className= \"main\">\r\n      <div>\r\n        <h3>\r\n          {name && `Player ${name} won the game`}\r\n          {!name && \"It's a tie \"}\r\n        </h3>\r\n        <div className=\"button-main\">\r\n          <button className=\"start-button\" onClick={restart}>Start Again</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Finished;\r\n","import Game from \"./pages/Game\";\nimport Start from \"./pages/Start\";\nimport Finished from \"./pages/Finished\";\nimport gameHook from \"./hooks/useTicTacToe\";\n\nconst App = () => {\n  const game = gameHook();\n\n  const styles = {\n    appContainer: {\n      display: 'flex',\n      height: '100vh',\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: '#53565A',\n    }\n  }\n\n  return (\n    <div style={styles.appContainer}>\n      {game.status === \"readyToStart\" && <Start handleStart={game.handleStart} />}\n     \n      {game.status === \"started\" && (\n        <Game board={game.board} handleClick={game.handleClick} />\n      )}\n\n      {game.status === \"finished\" && (\n        <Finished name={game.winner} restart={game.handleRestart} />\n      )}\n    </div>\n  );\n};\nexport default App;\n","import { useState, useEffect } from \"react\";\r\n\r\ninterface ReturnValue {\r\n  board: string[];\r\n  status: string;\r\n  winner: string | null;\r\n  handleClick: (index: number) => void;\r\n  handleRestart: () => void;\r\n  handleStart: (players: string[]) => void;\r\n}\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default (): ReturnValue => {\r\n  const [board, setBoard] = useState(Array(9).fill(\"\"));\r\n  const [turn, setTurn] = useState(\"X\");\r\n  const [winner, setWinner] = useState<string | null>(null);\r\n  const [status, setStatus] = useState(\"readyToStart\");\r\n  const [players, setPlayers] = useState([\"\", \"\"]);\r\n\r\n  useEffect(() => {\r\n    if (status !== \"started\") return;\r\n    const winningPositions = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ];\r\n    let winningPositionsIndex = 0;\r\n    let winner: string | null = null;\r\n    while (winningPositionsIndex < winningPositions.length && !winner) {\r\n      const boardPositionsToCheck = winningPositions[winningPositionsIndex];\r\n      const boardValuesToCkeck = boardPositionsToCheck.map(\r\n        (index) => board[index]\r\n      );\r\n      const checkingValue = boardValuesToCkeck[0];\r\n      const isFinished = boardValuesToCkeck.every(\r\n        (value) => value === checkingValue && checkingValue\r\n      );\r\n      winner = !isFinished ? null : checkingValue;\r\n      winningPositionsIndex++;\r\n    }\r\n    if (winner) {\r\n      setWinner(winner === \"X\" ? players[0] : players[1]);\r\n      setStatus(\"finished\");\r\n      return;\r\n    }\r\n    setStatus(board.filter((value) => !value).length ? \"started\" : \"finished\");\r\n  }, [board, players, status]);\r\n\r\n  const handleClick = (index: number): void => {\r\n    if (index < 0 || index > 9 || winner) return;\r\n\r\n    const newBoard = [...board];\r\n    newBoard.splice(index, 1, turn);\r\n    setBoard(newBoard);\r\n\r\n    const newTurn = turn === \"X\" ? \"O\" : \"X\";\r\n    setTurn(newTurn);\r\n  };\r\n  \r\n  const handleStart = (players: string[]) => {\r\n    setPlayers(players);\r\n    setTurn(\"X\");\r\n    setStatus(\"started\");\r\n  };\r\n  \r\n  const handleRestart = () => {\r\n    setBoard(Array(9).fill(\"\"));\r\n    setWinner(\"\");\r\n    setStatus(\"readyToStart\");\r\n  };\r\n\r\n  return { board, status, winner, handleClick, handleRestart, handleStart };\r\n};\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}